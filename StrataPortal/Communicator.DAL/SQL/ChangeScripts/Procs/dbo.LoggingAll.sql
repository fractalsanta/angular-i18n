-- Note: This file was originally generated by Genie

/****
    Purpose: 
             UPDATE procedure for the Logging table   
    Notes:   
             Standard UPDATE procedure. 
    Author:       
        Genie

****/


If EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'LoggingUpdate')
    BEGIN
        PRINT 'Dropping Procedure: LoggingUpdate'
        DROP PROCEDURE LoggingUpdate
    END
GO

PRINT 'Creating Procedure LoggingUpdate'
GO
CREATE PROCEDURE LoggingUpdate
    @LogId int
    , @Message varchar(4096)
    , @LogLevel varchar(16)
    , @LogCategory varchar(32)
    , @Key varchar(64)
AS
 BEGIN

    DECLARE @Err int , @Rowcount int

    UPDATE
        dbo.Logging 
    SET 
        Message = @Message
        , LogLevel = @LogLevel
        , LogCategory = @LogCategory
        , [Key] = @Key
    WHERE
        LogId = @LogId

    SELECT @Err = @@ERROR, @Rowcount = @@ROWCOUNT


    RETURN @Err
 END

GO
-- Note: This file was originally generated by Genie

/****
    Purpose: 
             SELECT procedure for the Logging table   
    Notes:   
             Standard SELECT procedure. 
    Author:       
        Genie

****/


If EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'LoggingSelect')
    BEGIN
        PRINT 'Dropping Procedure: LoggingSelect'
        DROP PROCEDURE LoggingSelect
    END
GO

PRINT 'Creating Procedure LoggingSelect'
GO
CREATE PROCEDURE LoggingSelect
    @LogId int
AS
 BEGIN

    DECLARE @Err int , @Rowcount int

    SELECT
        LogId
        , Created
        , Message
        , LogLevel
        , LogCategory
        , [Key]
    FROM
        dbo.Logging
    WHERE
        LogId = @LogId

    SELECT @Err = @@ERROR, @Rowcount = @@ROWCOUNT


    RETURN @Err
 END

GO
-- Note: This file was originally generated by Genie

/****
    Purpose: 
             SELECT ALL records from the Logging table.   
    Notes:   
             Selects ALL records. 
    Author:       
        Genie

****/


If EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'LoggingSelectAll')
    BEGIN
        PRINT 'Dropping Procedure: LoggingSelectAll'
        DROP PROCEDURE LoggingSelectAll
    END
GO

PRINT 'Creating Procedure LoggingSelectAll'
GO
CREATE PROCEDURE LoggingSelectAll
AS
 BEGIN

    DECLARE @Err int , @Rowcount int

    SELECT
        LogId
        , Created
        , Message
        , LogLevel
        , LogCategory
        , [Key]
    FROM
        dbo.Logging

    SELECT @Err = @@ERROR, @Rowcount = @@ROWCOUNT


    RETURN @Err
 END

GO
-- Note: This file was originally generated by Genie

/****
    Purpose: 
             INSERT procedure for the Logging table   
    Notes:   
             Standard INSERT procedure. 
    Author:       
        Genie

****/


If EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'LoggingInsert')
    BEGIN
        PRINT 'Dropping Procedure: LoggingInsert'
        DROP PROCEDURE LoggingInsert
    END
GO

PRINT 'Creating Procedure LoggingInsert'
GO
CREATE PROCEDURE LoggingInsert
    @Message varchar(4096)
    , @LogLevel varchar(16)
    , @LogCategory varchar(32)
    , @Key varchar(64)
    , @LogId int OUTPUT 
    , @Created datetime OUTPUT 
AS
 BEGIN

    DECLARE @Err int , @Rowcount int

    -- Set the values of the output variable audit date fields.
    DECLARE @currentTimeStamp datetime
    SET @currentTimeStamp = GetDate()

    SET @Created = @currentTimeStamp


    INSERT
        dbo.Logging
        (
        Message
        , LogLevel
        , LogCategory
        , [Key] 
	, Created
        )
    VALUES
        (
        @Message
        , @LogLevel
        , @LogCategory
        , @Key 
	, @Created
        )

    SELECT @Err = @@ERROR, @Rowcount = @@ROWCOUNT

    IF(@Err = 0)
    BEGIN
	    SET @LogId = SCOPE_IDENTITY()
    END



    RETURN @Err
 END

GO
-- Note: This file was originally generated by Genie

/****
    Purpose: 
             DELETE procedure for the Logging table   
    Notes:   
             Standard DELETE procedure. 
    Author:       
        Genie

****/


If EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = 'LoggingDelete')
    BEGIN
        PRINT 'Dropping Procedure: LoggingDelete'
        DROP PROCEDURE LoggingDelete
    END
GO

PRINT 'Creating Procedure LoggingDelete'
GO
CREATE PROCEDURE LoggingDelete
    @LogId int
AS
 BEGIN

    DECLARE @Err int , @Rowcount int

    -- Phsically Delete the record
    DELETE
        dbo.Logging
    WHERE
        LogId = @LogId

    SELECT @Err = @@ERROR, @Rowcount = @@ROWCOUNT


    RETURN @Err
 END

GO
