/////////////////////////////////////////////////////////////////////////////////////////////////
//
//    TypeScript definitions for REST WebAPI services 
//    WARNING: This file has been automatically generated. Any changes may be lost on the next run.
//
/////////////////////////////////////////////////////////////////////////////////////////////////

/// <reference path="../../scripts/typings/angularjs/angular.d.ts" />
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".ts" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core" #>
<#@ include file="VSCodeModel.t4" #>
<#@ include file="SimplerCodeModel.t4" #>
<#@ include file="Utils.t4" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#

var api = ScanApi();

foreach (ControllerDefinition controller in api.Controllers) 
{
    var areaName = GetAreaNamespace(controller.Type.FullName);
    if (areaName == null) continue;
    WriteLine("");
    WriteLine("module {0} {{", areaName);
    Indent(1); WriteLine("// {0}", GetAreaLocalName(controller.Type.FullName));
    Indent(1); Write("export interface {0}", GetProxyName(controller.Type.FullName)); WriteLine(" {");

    foreach (var member in controller.Methods) 
    {
        if (member.IsValid)
        {
#>

        // <#= member.OriginalName #>(<#= string.Join(", ", member.Parameters.Select(p => p.Name)) #>)
<#
        Indent(2); Write("{0}(", member.Name);
        Write(string.Join(", ", member.Parameters.Select(GetTSParamDefinition)));
            WriteLine("): ng.IHttpPromise<{0}>;", GetTSPromiseName(member.Type));
        }
        else
        {
            WriteLine(""); Indent(2); WriteLine("// Error in method '{0}': {1}", member.OriginalName, member.ValidationError);
        }
    }
    Indent(1); WriteLine("}");
    Indent(0); WriteLine("}");
}

foreach (var type in api.Models)
{
    GenerateModel(type);
}

foreach (var type in api.Enums)
{
    GenerateEnum(type);
}
#>
<#+
void GenerateEnum(EnumDefinition enumDef)
{
    var fullName = enumDef.Type.FullName;
    var areaName = GetAreaNamespace(fullName);
    if (areaName == null) return;
    WriteLine("");
    WriteLine("module {0} {{", areaName);
    Indent(1); WriteLine("export enum {0} {{",  fullName.Split('.').Last());
    foreach (var member in enumDef.Members)
    {
        // render name and value (optional)
        Indent(2); 
        Write("{0}", member.Name); 
        if (member.Value != null) 
            Write(" = {0}", member.Value); 
        WriteLine(",");
    }
    Indent(1); WriteLine("}");
    WriteLine("}");
}

void GenerateModel(ModelDefinition modelDef)
{
    string fullName = modelDef.Type.FullName;
    var areaName = GetAreaNamespace(fullName);
    if (areaName == null) return;
    WriteLine("");
    WriteLine("module {0} {{", areaName);
    var theClass = AllClasses.FirstOrDefault(c => c.FullName == fullName);
    if (theClass == null)
    {
        return;
    }
    Indent(1); WriteLine("export interface {0} {{",  GetModelName(fullName).Split('.').Last());
    var members = EnumerateTSMembers(theClass).OfType<CodeProperty>();
    foreach(CodeProperty property in members)
    {
        if (IsNullable(property.Type))
        {
            Indent(2); WriteLine("{0}?: {1};", property.Name, GetTSName(GetTypeDefinition(property)));
        }
        else
        {
            Indent(2); WriteLine("{0}: {1};", property.Name, GetTSName(GetTypeDefinition(property)));
        }
    }
    Indent(1); WriteLine("}");
    WriteLine("}");
}
#>