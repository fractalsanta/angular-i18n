(function(exports){

    var measured  = require('measured');
    var EventEmitter = require('events').EventEmitter;
    var util = require('util');

    var states = {
        OPEN      : 0,
        HALF_OPEN : 1,
        CLOSED    : 2
    };

    function backedOff(err){
        return (err && (err.status === 429));
    }

    function driverGaveUp(err){
        return (err && (
            err.code === 'ETIMEDOUT' || err.code === "ESOCKETTIMEDOUT" || err.code === "ECONNABORTED")
        );
    }

    function serverGaveUp(err){
        return (err && (err.code === 'ECONNRESET'));
    }


    //Breaker
    var Breaker = exports.Breaker = function(rules){

        var breaker = this;
        EventEmitter.call(breaker);
        breaker.state   = states.CLOSED;
        breaker.rules   = rules;
        breaker.stats   = {
            errors        : new measured.Counter(),     //errors
            busy          : new measured.Counter(),     //throttled requests
            resets        : new measured.Counter(),     //server quit
            timeouts      : new measured.Counter()      //client quit
        };

        //check the reponse
        breaker.check  = function(err, json, res){

            if(serverGaveUp(err)){
                breaker.stats.resets.inc();
            } else if (driverGaveUp(err)){
                breaker.stats.timeouts.inc();
            } else if (backedOff(err)){
                breaker.stats.busy.inc();
                breaker.stats.errors.inc();
            }

            if(Object.getOwnPropertyNames(limits).some(function(measure){
                    return breaker.stats[measure] && breaker.stats[measure] > breaker.rules[measure];
                })){
                breaker.forceOpen();
            }

            return breaker;
        }
    };

    util.inherits(Breaker, EventEmitter);

    //- reset
    Breaker.prototype.reset = function(){
        this.stats.errors.reset();
        this.stats.busy.reset();
        this.stats.resets.reset();
        this.stats.timeouts.reset();
    };


    //- isOpen
    Breaker.prototype.isOpen = function () {
        return this.state === states.OPEN;
    };

    //- isHalfOpen
    Breaker.prototype.isHalfOpen = function () {
        return this.state === states.HALF;
    };

    Breaker.prototype.isClosed = function () {
        return this.state === states.CLOSED;
    };

    Breaker.prototype.forceOpen = function () {

        var self = this;

        if(this.state === states.OPEN) {
            return;
        }

        this.state = states.OPEN;

        // After reset timeout circuit should enter half open state
        setTimeout(function () {
            self.forceHalfOpen();
        }, self.rules.resetTimeout);

        this.emit('opened');
    };

    Breaker.prototype.forceClosed = function () {
        this.reset();
        if(this.state === states.CLOSED) {
            return;
        }
        this.state = states.CLOSED;
        this.emit('closed');
    };

    Breaker.prototype.forceHalfOpen = function () {
        if(this.state === states.HALF) {
            return;
        }
        this.state = states.HALF;
        this.emit('halfOpened');
    };

})(module.exports);
