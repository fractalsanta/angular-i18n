module.exports = function wrapped(opr){
    'use strict';

    var backoff = require('backoff');

    var DEFAULTS = {
        maxDelay    : 1000*60*60*4,
        initialDelay: 5000
    };

    var _backoff,
        _calling,
        _calledBack;

    return function setup(options){

        var outer = {};

        outer.onBackoff = function(callback){
            _backoff = callback;
        };

        outer.onCalling = function(callback){
            _calling = callback;
        };

        outer.onCalledBack = function(callback){
            _calledBack = callback;
        };

        outer.run = function(args, callback){

            function buildCall() {
                var call = backoff.call(opr, args, callback);
                call.setStrategy(new backoff.ExponentialStrategy(options || DEFAULTS));
                if (_backoff) call.on('backoff', _backoff);
                if (_calling) call.on('call', _calling);
                if (_calledBack) call.on('callback', _calledBack);
                call.retryNow = function(){
                    try{
                        call.removeAllListeners();
                        call.abort();
                        buildCall(args, callback);
                    } catch (err){}
                };
                call.start();
                return call;
            }

            return buildCall();
        };

        return outer;
    }
};
